citation: Aamazon AWS example used for coding of SQS and DynamoDB for remote workers execution

Local Queue:

package com.vinit.queue;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.LinkedBlockingQueue;

//client file for in-memory Queue, which creates pool of worker threads and reads tasks from workload file
//and schedules workers
public class Client {
	static BufferedReader bufferedReader;
	static LinkedBlockingQueue<Task> inputQueue = new LinkedBlockingQueue<Task>();//input quque for tasks
	static LinkedBlockingQueue<Task> outputQueue = new LinkedBlockingQueue<Task>();//response quque
	static PropertyBuilder propertyBuilder = new PropertyBuilder();
	static long stop, start = -1, totalTimeDifference;
	static double diff;

	public static void main(String[] args) {
		Task outputTask;
		String workload_file = args[6];
		List<Thread> threadpool = new ArrayList<>(Integer.parseInt(args[4]));
		try {
			bufferedReader = new BufferedReader(new FileReader(new File(workload_file)));
			String task;
			long index = 1;
			//starts pool of threads which wil wait for tasks in queue in polling state
			for (int i = 0; i < Integer.parseInt(args[4]); i++) {
				threadpool.add(new Thread(new Local(inputQueue, outputQueue)));
				threadpool.get(i).start();
			}
			//reads tasks from workload file and put the tasks on queue
			while ((task = bufferedReader.readLine()) != null) {
				String[] strArray = task.split(" ");
				Task enqueueTask = new Task(index, Integer.parseInt(strArray[1]), 1);
				index++;
				try {
					enqueue(enqueueTask);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			long outputIndex = 1;
			while (true) {
				//Reading the response from workers threads about exceution of tasks
				try {
					outputTask = outputQueue.take();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				outputIndex++;

				if (outputIndex == index) {
					stop = System.nanoTime();
					totalTimeDifference = (stop - start);
					System.out.println("----Time in nanoseconds----" + totalTimeDifference);
					System.exit(0);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	//putting tasks on quque
	public static void enqueue(Task enqueueTask) throws InterruptedException {

		if (start == -1) {
			start = System.nanoTime();
		}
		inputQueue.put(enqueueTask);

	}

}


package com.vinit.queue;

import java.util.concurrent.LinkedBlockingQueue;

//local workers responsible to execute the task
public class Local implements Runnable {
	LinkedBlockingQueue<Task> inputQueue;
	static LinkedBlockingQueue<Task> outputQueue;

	public Local(LinkedBlockingQueue<Task> queue, LinkedBlockingQueue<Task> outputQueue) {
		this.inputQueue = queue;
		Local.outputQueue = outputQueue;
	}

	@Override
	public void run() {
		Task task = null;
		while (true) {
				try {
					//waits for task in queue
					task = inputQueue.take();
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			try {
				//Executes the task
				Thread.sleep(task.getTaskSleepDuration());
				//send the response of task execution
				task.setResult(0);
				enqueue(task);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		}

	}

	//putting response on the response queue
	public static void enqueue(Task enqueueTask) {
		
			try {
				outputQueue.put(enqueueTask);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		
	}

}
package com.vinit.queue;

import java.io.Serializable;

//POJO class for task details
public class Task implements Serializable {

	public Task(long taskId, int taskSleepDuration,int result) {
		super();
		this.taskId = taskId;
		this.taskSleepDuration = taskSleepDuration;
		this.result=result;
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private long taskId;
	private int taskSleepDuration;
	private int result;

	public long getTaskId() {
		return taskId;
	}

	public void setTaskId(long taskId) {
		this.taskId = taskId;
	}

	public int getTaskSleepDuration() {
		return taskSleepDuration;
	}

	public void setTaskSleepDuration(int taskSleepDuration) {
		this.taskSleepDuration = taskSleepDuration;
	}

	public int getResult() {
		return result;
	}

	public void setResult(int result) {
		this.result = result;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

}

package com.vinit.queue;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class PropertyBuilder {

	Properties properties = new Properties();

	public PropertyBuilder() {
		try {
			InputStream inputStream = new FileInputStream("QueueConfig.properties");
			properties.load(inputStream);
		} catch (IOException e) {
			
		}
	}

	public  String getProperty(String key) {
		String val = properties.getProperty(key);
		return val;
	}

}


Remote SQS queue:


package com.remote.sqs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.amazonaws.AmazonClientException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.auth.profile.ProfilesConfigFile;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.DescribeTableRequest;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;
import com.amazonaws.services.dynamodbv2.model.TableDescription;
import com.amazonaws.services.dynamodbv2.util.Tables;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClient;
import com.amazonaws.services.sqs.model.CreateQueueRequest;
import com.amazonaws.services.sqs.model.DeleteQueueRequest;
import com.amazonaws.services.sqs.model.Message;
import com.amazonaws.services.sqs.model.QueueDoesNotExistException;
import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
import com.amazonaws.services.sqs.model.SendMessageBatchRequestEntry;

public class Client {
	static BufferedReader bufferedReader;
	static AmazonSQS sqs;
	static String queueUrl;
	static String outputQueueUrl;
	static List<Message> message;
	static long stop, start = -1, totalTimeDifference;
	static double diff;
	static AmazonDynamoDBClient dynamoDB;
	static CreateTableRequest createTableRequest;
	static DescribeTableRequest describeTableRequest;

	//client that creates a SQS and DynamoDB, and reads data fromworkload file and put that into SQS
	public static void main(String[] args) {

		AWSCredentials credentials = null;
		try {
			ProfilesConfigFile credentialsConfig = new ProfilesConfigFile("credentials");//credentials file required to access AWS
			credentials = new ProfileCredentialsProvider(credentialsConfig, "default").getCredentials();
		} catch (Exception e) {
			throw new AmazonClientException("Cannot load the credentials from the credential profiles file. " + e);
		}
		// SQS initialization
		sqs = new AmazonSQSClient(credentials);
		Region usWest2 = Region.getRegion(Regions.US_WEST_2);
		sqs.setRegion(usWest2);
		
		//DynamoDB initialization
		dynamoDB = new AmazonDynamoDBClient(credentials);
		dynamoDB.setRegion(usWest2);
		String tName = "sqs";
		//checking table is active or not, if not creates the table with id column
		if (Tables.doesTableExist(dynamoDB, tName)) {
			System.out.println("Table " + tName + " is already ACTIVE");
		} else {
			createTableRequest = new CreateTableRequest().withTableName(tName)
					.withKeySchema(new KeySchemaElement().withAttributeName("mid").withKeyType(KeyType.HASH))
					.withAttributeDefinitions(
							new AttributeDefinition().withAttributeName("mid").withAttributeType(ScalarAttributeType.S))
					.withProvisionedThroughput(
							new ProvisionedThroughput().withReadCapacityUnits(200L).withWriteCapacityUnits(200L));
			TableDescription createdTableDescription = dynamoDB.createTable(createTableRequest).getTableDescription();
		}
		try {
			Tables.awaitTableToBecomeActive(dynamoDB, tName);

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//creating the queue for input tasks and reading responses from workers
		CreateQueueRequest createQueueRequest = new CreateQueueRequest(args[2]);
		queueUrl = sqs.createQueue(createQueueRequest).getQueueUrl();
		CreateQueueRequest outputQueueRequest = new CreateQueueRequest("outputremoteSQS");
		outputQueueUrl = sqs.createQueue(outputQueueRequest).getQueueUrl();

		String workload_file = args[4];
		try {
			bufferedReader = new BufferedReader(new FileReader(new File(workload_file)));
			String task;
			long index = 1;
			List<SendMessageBatchRequestEntry> batchRequestEntries = new ArrayList<SendMessageBatchRequestEntry>();
			SendMessageBatchRequestEntry batchRequestEntry;
			int count = 0;
			while ((task = bufferedReader.readLine()) != null) {//reads workload file and put the tasks in SQS
				index++;
				enqueue(task);
			}

			
			//Reads the responses from workers
			ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(outputQueueUrl);
			// System.out.println(index);
			long outputIndex = 1;
			while (true) {
				receiveMessageRequest.setVisibilityTimeout(43200);
				receiveMessageRequest.withMaxNumberOfMessages(1);
				try {
					synchronized (sqs) {
						message = sqs.receiveMessage(receiveMessageRequest).getMessages();
					}
					if (message.size() > 0) {
						String result = message.get(0).getBody();
						outputIndex++;
						// sqs.deleteMessage(outputQueueUrl,
						// message.get(0).getReceiptHandle());
					} else {
						receiveMessageRequest.setWaitTimeSeconds(1);
					}
				} catch (QueueDoesNotExistException exception) {
					System.out.println("queue doesn't exist");
					System.exit(0);
				}
				// System.out.println("-------------" + outputIndex);
				if (outputIndex == index) {
					stop = System.nanoTime();
					totalTimeDifference = (stop - start);
					System.out.println("----Time in nanoseconds----" + totalTimeDifference);
					System.out.println("Deleting the test queue.\n");
					sqs.deleteQueue(new DeleteQueueRequest(queueUrl));
					sqs.deleteQueue(new DeleteQueueRequest(outputQueueUrl));
					System.exit(0);
				}
			}

		} catch (NumberFormatException | IOException e) {
			e.printStackTrace();
		}
	}

	
	//putting task on quque
	public static void enqueue(String msg) {
		if (start == -1) {
			start = System.nanoTime();
		}

		sqs.sendMessage(queueUrl, msg);

	}
}


package com.remote.sqs;

import java.util.ArrayList;
import java.util.List;

import com.amazonaws.AmazonClientException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.auth.profile.ProfilesConfigFile;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.model.DescribeTableRequest;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClient;


//responsible to start the workers threads
public class Workers {
	static AmazonSQS sqs;
	static String queueUrl;
	static String outputQueueUrl;
	static AmazonDynamoDBClient dynamoDB;
	static DescribeTableRequest describeTableRequest;

	public static void main(String[] args) {
		int threadsPerWorker = Integer.parseInt(args[4]);
		AWSCredentials credentials = null;
		try {
			ProfilesConfigFile credentialsConfig = new ProfilesConfigFile("credentials");
			credentials = new ProfileCredentialsProvider(credentialsConfig,"default").getCredentials();
		} catch (Exception e) {
			throw new AmazonClientException("Cannot load the credentials from the credential profiles file. " + e);
		}
		sqs = new AmazonSQSClient(credentials);
		Region usWest2 = Region.getRegion(Regions.US_WEST_2);
		sqs.setRegion(usWest2);
		dynamoDB = new AmazonDynamoDBClient(credentials);
		dynamoDB.setRegion(usWest2);
		String tName = "sqs";
		boolean flag = false;

		//getting the existing Queue and DynamoDB
		while (queueUrl == null || outputQueueUrl == null || describeTableRequest == null) {
			try {
				describeTableRequest = new DescribeTableRequest().withTableName(tName);
				// TableDescription tableDescription =
				// dynamoDB.describeTable(describeTableRequest).getTable();
				// System.out.println("Table Description: " + tableDescription);
				queueUrl = sqs.getQueueUrl(args[2]).getQueueUrl();
				outputQueueUrl = sqs.getQueueUrl("outputremoteSQS").getQueueUrl();

			} catch (Exception exception) {
				if (!flag) {
					System.out.println("Waiting for SQS and Table to get active......");
					flag = true;
				}
				// System.out.println("Waiting for SQS and Table to get
				// active......");
			}
		}
		System.out.println("its Now Available");
		List<Thread> workerThreadList = new ArrayList<Thread>(threadsPerWorker);
		for (int i = 0; i < threadsPerWorker; i++) {
			workerThreadList.add(new Thread(new WorkerThread(sqs, queueUrl, outputQueueUrl, dynamoDB)));
			workerThreadList.get(i).start();
		}

	}

}

package com.remote.sqs;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.GetItemRequest;
import com.amazonaws.services.dynamodbv2.model.GetItemResult;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.model.Message;
import com.amazonaws.services.sqs.model.QueueDoesNotExistException;
import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
import com.amazonaws.services.sqs.model.SendMessageRequest;

//worker threads
public class WorkerThread implements Runnable {
	AmazonSQS sqs;
	static String queueUrl;
	List<Message> message;
	static String outputQueueUrl;
	AmazonDynamoDBClient dynamoDB;
	int msgCount;
	static int count=1;

	WorkerThread(AmazonSQS sqs, String queueUrl, String outputQueueUrl, AmazonDynamoDBClient dynamoDB) {
		this.sqs = sqs;
		WorkerThread.queueUrl = queueUrl;
		WorkerThread.outputQueueUrl = outputQueueUrl;
		this.dynamoDB = dynamoDB;
	}

	@Override
	public void run() {
		ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest(queueUrl);
		while (true) {
			receiveMessageRequest.setVisibilityTimeout(43200);
			receiveMessageRequest.withMaxNumberOfMessages(1);
			try {
				synchronized (sqs) {//reads the message from quque
					message = sqs.receiveMessage(receiveMessageRequest).getMessages();
				}

				if (message.size() > 0) {
					//check if message id is already there in DynamoDB 
					String[] strArray = message.get(0).getBody().split(" ");
						HashMap<String, Condition> scanFilter = new HashMap<String, Condition>();
						Condition condition = new Condition().withComparisonOperator(ComparisonOperator.EQ.toString())
								.withAttributeValueList(new AttributeValue().withS(message.get(0).getMessageId()));
						scanFilter.put("mid", condition);
						ScanRequest scanRequest = new ScanRequest("sqs").withScanFilter(scanFilter);
						ScanResult scanResult = dynamoDB.scan(scanRequest);
						msgCount = scanResult.getCount();
				
					// System.out.println(strArray[1]);
					if (msgCount == 0) {
						//System.out.println(count);
						//count++;
						//System.out.println("-----------------------------------------------");
						//if message is not there in DynamoDb then add it to the DynamoDB
						Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
						item.put("mid", new AttributeValue(message.get(0).getMessageId()));
						PutItemRequest putItemRequest = new PutItemRequest("sqs", item);
						PutItemResult putItemResult = dynamoDB.putItem(putItemRequest);
					
						try {
							//Executing the task
							Thread.sleep(Integer.parseInt(strArray[1]));
							//System.out.println(strArray[1]);
							sqs.sendMessage(new SendMessageRequest(outputQueueUrl, "0"));
							//sqs.deleteMessage(queueUrl, message.get(0).getReceiptHandle());
							// System.out.println(message.get(0).getBody());
						} catch (NumberFormatException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				} else {
					receiveMessageRequest.setWaitTimeSeconds(1);
				}
			} catch (QueueDoesNotExistException exception) {
				System.out.println("queue doesn't exist");
				System.exit(0);
			}
		}

	}

}

